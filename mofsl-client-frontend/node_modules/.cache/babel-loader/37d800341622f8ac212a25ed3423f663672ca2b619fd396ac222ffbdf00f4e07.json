{"ast":null,"code":"// import React, { createContext, useContext, useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5005';\n\n// // Create the auth context\n// const AuthContext = createContext(null);\n\n// // Custom hook to use the auth context\n// export const useAuth = () => useContext(AuthContext);\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   // Check if user is authenticated on initial load\n//   useEffect(() => {\n//     const checkAuthStatus = async () => {\n//       try {\n//         // Call a protected endpoint to check auth status\n//         const response = await axios.get(`${API_BASE_URL}/api/test-auth`, {\n//           withCredentials: true\n//         });\n\n//         if (response.data && response.data.status === 'SUCCESS') {\n//           // Try to get client info\n//           const clientResponse = await axios.get(`${API_BASE_URL}/api/client-info`, {\n//             withCredentials: true\n//           });\n\n//           if (clientResponse.data && clientResponse.data.status === 'SUCCESS') {\n//             setUser(clientResponse.data.client);\n//           }\n//         }\n//       } catch (err) {\n//         console.log('Not authenticated or error:', err);\n//         setUser(null);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     checkAuthStatus();\n//   }, []);\n\n//   // Login function\n//   const login = async (clientId, password) => {\n//     try {\n//       setError(null);\n//       const response = await axios.post(\n//         `${API_BASE_URL}/api/login`,\n//         { client_id: clientId, password },\n//         { withCredentials: true }\n//       );\n\n//       if (response.data && response.data.status === 'SUCCESS') {\n//         if (response.data.needOTP) {\n//           // Return that OTP is needed\n//           return { needOTP: true, clientId };\n//         } else {\n//           // Authentication successful without OTP\n//           // Get client info\n//           const clientResponse = await axios.get(`${API_BASE_URL}/api/client-info`, {\n//             withCredentials: true\n//           });\n\n//           if (clientResponse.data && clientResponse.data.status === 'SUCCESS') {\n//             setUser(clientResponse.data.client);\n//           }\n\n//           return { success: true };\n//         }\n//       } else {\n//         setError(response.data.message || 'Authentication failed');\n//         return { success: false, error: response.data.message };\n//       }\n//     } catch (err) {\n//       const errorMsg = err.response?.data?.message || 'Authentication failed';\n//       setError(errorMsg);\n//       return { success: false, error: errorMsg };\n//     }\n//   };\n\n//   // Verify OTP function\n//   const verifyOTP = async (clientId, otp) => {\n//     try {\n//       setError(null);\n//       const response = await axios.post(\n//         `${API_BASE_URL}/api/verify-otp`,\n//         { client_id: clientId, otp },\n//         { withCredentials: true }\n//       );\n\n//       if (response.data && response.data.status === 'SUCCESS') {\n//         // OTP verification successful\n//         // Get client info\n//     //     const clientResponse = await axios.get(`${API_BASE_URL}/api/client-info`, {\n//     //       withCredentials: true\n//     //     });\n\n//     //     if (\n//     //       clientResponse.data &&\n//     //       clientResponse.data.status === 'SUCCESS' &&\n//     //       clientResponse.data.client\n//     //     ) {\n//     //       setUser(clientResponse.data.client);\n//     //     }\n\n//     //     return { success: true };\n//     //   } else {\n//     //     setError(response.data.message || 'OTP verification failed');\n//     //     return { success: false, error: response.data.message };\n//     //   }\n//     // } catch (err) {\n//     //   const errorMsg = err.response?.data?.message || 'OTP verification failed';\n//     //   setError(errorMsg);\n//     //   return { success: false, error: errorMsg };\n//     // }\n//       }\n//   };\n\n//   // Logout function\n//   const logout = () => {\n//     setUser(null);\n//   };\n\n//   // Context value\n//   const value = {\n//     user,\n//     loading,\n//     error,\n//     login,\n//     verifyOTP,\n//     logout,\n//     isAuthenticated: !!user\n//   };\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };","map":{"version":3,"names":[],"sources":["/home/mrunal/Documents/novazen/mofsl-client-frontend/src/contexts/AuthContext.jsx"],"sourcesContent":["// import React, { createContext, useContext, useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5005';\n\n// // Create the auth context\n// const AuthContext = createContext(null);\n\n// // Custom hook to use the auth context\n// export const useAuth = () => useContext(AuthContext);\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   // Check if user is authenticated on initial load\n//   useEffect(() => {\n//     const checkAuthStatus = async () => {\n//       try {\n//         // Call a protected endpoint to check auth status\n//         const response = await axios.get(`${API_BASE_URL}/api/test-auth`, {\n//           withCredentials: true\n//         });\n        \n//         if (response.data && response.data.status === 'SUCCESS') {\n//           // Try to get client info\n//           const clientResponse = await axios.get(`${API_BASE_URL}/api/client-info`, {\n//             withCredentials: true\n//           });\n          \n//           if (clientResponse.data && clientResponse.data.status === 'SUCCESS') {\n//             setUser(clientResponse.data.client);\n//           }\n//         }\n//       } catch (err) {\n//         console.log('Not authenticated or error:', err);\n//         setUser(null);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     checkAuthStatus();\n//   }, []);\n\n//   // Login function\n//   const login = async (clientId, password) => {\n//     try {\n//       setError(null);\n//       const response = await axios.post(\n//         `${API_BASE_URL}/api/login`,\n//         { client_id: clientId, password },\n//         { withCredentials: true }\n//       );\n\n//       if (response.data && response.data.status === 'SUCCESS') {\n//         if (response.data.needOTP) {\n//           // Return that OTP is needed\n//           return { needOTP: true, clientId };\n//         } else {\n//           // Authentication successful without OTP\n//           // Get client info\n//           const clientResponse = await axios.get(`${API_BASE_URL}/api/client-info`, {\n//             withCredentials: true\n//           });\n          \n//           if (clientResponse.data && clientResponse.data.status === 'SUCCESS') {\n//             setUser(clientResponse.data.client);\n//           }\n          \n//           return { success: true };\n//         }\n//       } else {\n//         setError(response.data.message || 'Authentication failed');\n//         return { success: false, error: response.data.message };\n//       }\n//     } catch (err) {\n//       const errorMsg = err.response?.data?.message || 'Authentication failed';\n//       setError(errorMsg);\n//       return { success: false, error: errorMsg };\n//     }\n//   };\n\n//   // Verify OTP function\n//   const verifyOTP = async (clientId, otp) => {\n//     try {\n//       setError(null);\n//       const response = await axios.post(\n//         `${API_BASE_URL}/api/verify-otp`,\n//         { client_id: clientId, otp },\n//         { withCredentials: true }\n//       );\n\n//       if (response.data && response.data.status === 'SUCCESS') {\n//         // OTP verification successful\n//         // Get client info\n//     //     const clientResponse = await axios.get(`${API_BASE_URL}/api/client-info`, {\n//     //       withCredentials: true\n//     //     });\n        \n//     //     if (\n//     //       clientResponse.data &&\n//     //       clientResponse.data.status === 'SUCCESS' &&\n//     //       clientResponse.data.client\n//     //     ) {\n//     //       setUser(clientResponse.data.client);\n//     //     }\n        \n        \n//     //     return { success: true };\n//     //   } else {\n//     //     setError(response.data.message || 'OTP verification failed');\n//     //     return { success: false, error: response.data.message };\n//     //   }\n//     // } catch (err) {\n//     //   const errorMsg = err.response?.data?.message || 'OTP verification failed';\n//     //   setError(errorMsg);\n//     //   return { success: false, error: errorMsg };\n//     // }\n//       }\n//   };\n\n//   // Logout function\n//   const logout = () => {\n//     setUser(null);\n//   };\n\n//   // Context value\n//   const value = {\n//     user,\n//     loading,\n//     error,\n//     login,\n//     verifyOTP,\n//     logout,\n//     isAuthenticated: !!user\n//   };\n\n//   return (\n//     <AuthContext.Provider value={value}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };"],"mappings":"AAAA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/home/mrunal/Documents/novazen/mofsl-client-frontend/src/contexts/AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5005';\n\n// Create the auth context\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// Custom hook to use the auth context\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Check if user is authenticated on initial load\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        // Call a protected endpoint to check auth status\n        const response = await axios.get(`${API_BASE_URL}/api/test-auth`, {\n          withCredentials: true\n        });\n        if (response.data && response.data.status === 'SUCCESS') {\n          // Try to get client info\n          const clientResponse = await axios.get(`${API_BASE_URL}/api/client-info`, {\n            withCredentials: true\n          });\n          if (clientResponse.data && clientResponse.data.status === 'SUCCESS') {\n            setUser(clientResponse.data.client);\n          }\n        }\n      } catch (err) {\n        console.log('Not authenticated or error:', err);\n        setUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuthStatus();\n  }, []);\n\n  // Login function\n  const login = async (clientId, password) => {\n    try {\n      setError(null);\n      const response = await axios.post(`${API_BASE_URL}/api/login`, {\n        client_id: clientId,\n        password\n      }, {\n        withCredentials: true\n      });\n      if (response.data && response.data.status === 'SUCCESS') {\n        if (response.data.needOTP) {\n          // Return that OTP is needed\n          return {\n            needOTP: true,\n            clientId\n          };\n        } else {\n          // Authentication successful without OTP\n          // Get client info\n          const clientResponse = await axios.get(`${API_BASE_URL}/api/client-info`, {\n            withCredentials: true\n          });\n          if (clientResponse.data && clientResponse.data.status === 'SUCCESS') {\n            setUser(clientResponse.data.client);\n          }\n          return {\n            success: true\n          };\n        }\n      } else {\n        setError(response.data.message || 'Authentication failed');\n        return {\n          success: false,\n          error: response.data.message\n        };\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      const errorMsg = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Authentication failed';\n      setError(errorMsg);\n      return {\n        success: false,\n        error: errorMsg\n      };\n    }\n  };\n\n  // Verify OTP function\n  const verifyOTP = async (clientId, otp) => {\n    try {\n      setError(null);\n      const response = await axios.post(`${API_BASE_URL}/api/verify-otp`, {\n        client_id: clientId,\n        otp\n      }, {\n        withCredentials: true\n      });\n      if (response.data && response.data.status === 'SUCCESS') {\n        // OTP verification successful\n        // Get client info\n        const clientResponse = await axios.get(`${API_BASE_URL}/api/client-info`, {\n          withCredentials: true\n        });\n        if (clientResponse.data && clientResponse.data.status === 'SUCCESS' && clientResponse.data.client) {\n          setUser(clientResponse.data.client);\n        }\n        return {\n          success: true\n        };\n      } else {\n        setError(response.data.message || 'OTP verification failed');\n        return {\n          success: false,\n          error: response.data.message\n        };\n      }\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      const errorMsg = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'OTP verification failed';\n      setError(errorMsg);\n      return {\n        success: false,\n        error: errorMsg\n      };\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    setUser(null);\n  };\n\n  // Context value\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    verifyOTP,\n    logout,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","loading","setLoading","error","setError","checkAuthStatus","response","get","withCredentials","data","status","clientResponse","client","err","console","log","login","clientId","password","post","client_id","needOTP","success","message","_err$response","_err$response$data","errorMsg","verifyOTP","otp","_err$response2","_err$response2$data","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mrunal/Documents/novazen/mofsl-client-frontend/src/contexts/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5005';\n\n// Create the auth context\nconst AuthContext = createContext(null);\n\n// Custom hook to use the auth context\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Check if user is authenticated on initial load\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        // Call a protected endpoint to check auth status\n        const response = await axios.get(`${API_BASE_URL}/api/test-auth`, {\n          withCredentials: true\n        });\n        \n        if (response.data && response.data.status === 'SUCCESS') {\n          // Try to get client info\n          const clientResponse = await axios.get(`${API_BASE_URL}/api/client-info`, {\n            withCredentials: true\n          });\n          \n          if (clientResponse.data && clientResponse.data.status === 'SUCCESS') {\n            setUser(clientResponse.data.client);\n          }\n        }\n      } catch (err) {\n        console.log('Not authenticated or error:', err);\n        setUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAuthStatus();\n  }, []);\n\n  // Login function\n  const login = async (clientId, password) => {\n    try {\n      setError(null);\n      const response = await axios.post(\n        `${API_BASE_URL}/api/login`,\n        { client_id: clientId, password },\n        { withCredentials: true }\n      );\n\n      if (response.data && response.data.status === 'SUCCESS') {\n        if (response.data.needOTP) {\n          // Return that OTP is needed\n          return { needOTP: true, clientId };\n        } else {\n          // Authentication successful without OTP\n          // Get client info\n          const clientResponse = await axios.get(`${API_BASE_URL}/api/client-info`, {\n            withCredentials: true\n          });\n          \n          if (clientResponse.data && clientResponse.data.status === 'SUCCESS') {\n            setUser(clientResponse.data.client);\n          }\n          \n          return { success: true };\n        }\n      } else {\n        setError(response.data.message || 'Authentication failed');\n        return { success: false, error: response.data.message };\n      }\n    } catch (err) {\n      const errorMsg = err.response?.data?.message || 'Authentication failed';\n      setError(errorMsg);\n      return { success: false, error: errorMsg };\n    }\n  };\n\n  // Verify OTP function\n  const verifyOTP = async (clientId, otp) => {\n    try {\n      setError(null);\n      const response = await axios.post(\n        `${API_BASE_URL}/api/verify-otp`,\n        { client_id: clientId, otp },\n        { withCredentials: true }\n      );\n\n      if (response.data && response.data.status === 'SUCCESS') {\n        // OTP verification successful\n        // Get client info\n        const clientResponse = await axios.get(`${API_BASE_URL}/api/client-info`, {\n          withCredentials: true\n        });\n        \n        if (\n          clientResponse.data &&\n          clientResponse.data.status === 'SUCCESS' &&\n          clientResponse.data.client\n        ) {\n          setUser(clientResponse.data.client);\n        }\n        \n        \n        return { success: true };\n      } else {\n        setError(response.data.message || 'OTP verification failed');\n        return { success: false, error: response.data.message };\n      }\n    } catch (err) {\n      const errorMsg = err.response?.data?.message || 'OTP verification failed';\n      setError(errorMsg);\n      return { success: false, error: errorMsg };\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    setUser(null);\n  };\n\n  // Context value\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    verifyOTP,\n    logout,\n    isAuthenticated: !!user\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
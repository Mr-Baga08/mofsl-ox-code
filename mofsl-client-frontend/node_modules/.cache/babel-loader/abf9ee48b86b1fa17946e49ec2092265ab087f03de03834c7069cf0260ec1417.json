{"ast":null,"code":"var _jsxFileName = \"/home/mrunal/Documents/novazen/mofsl-client-frontend/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState, useEffect } from 'react';\nimport Login from '../src/components/Login';\nimport OTPVerification from '../src/components/OTPVerification';\nimport Dashboard from './Dashboard'; // Assuming you have a Dashboard component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [step, setStep] = useState('login');\n  const [clientId, setClientId] = useState('');\n  const [authData, setAuthData] = useState(null);\n\n  // Check for stored clientId and authentication state on mount\n  useEffect(() => {\n    const storedClientId = localStorage.getItem('clientId');\n    const storedAuthData = localStorage.getItem('authData');\n    if (storedAuthData) {\n      // User is already authenticated\n      setAuthData(JSON.parse(storedAuthData));\n      setStep('dashboard');\n    } else if (storedClientId) {\n      // User has started authentication but needs OTP verification\n      setClientId(storedClientId);\n      setStep('otp');\n    }\n  }, []);\n  const handleLogin = data => {\n    // Store authentication data\n    localStorage.setItem('authData', JSON.stringify(data));\n    setAuthData(data);\n    setStep('dashboard');\n  };\n  const handleOTPRequired = clientId => {\n    setClientId(clientId);\n    setStep('otp');\n  };\n  const handleBackToLogin = () => {\n    // Clear stored clientId when going back to login\n    localStorage.removeItem('clientId');\n    setClientId('');\n    setStep('login');\n  };\n  const handleLogout = () => {\n    // Clear all stored data on logout\n    localStorage.removeItem('clientId');\n    localStorage.removeItem('authData');\n    setAuthData(null);\n    setClientId('');\n    setStep('login');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [step === 'login' && /*#__PURE__*/_jsxDEV(Login, {\n      onLogin: handleLogin,\n      onOTPRequired: handleOTPRequired\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), step === 'otp' && /*#__PURE__*/_jsxDEV(OTPVerification, {\n      clientId: clientId,\n      onSuccess: handleLogin,\n      onBackToLogin: handleBackToLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this), step === 'dashboard' && /*#__PURE__*/_jsxDEV(Dashboard, {\n      authData: authData,\n      onLogout: handleLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Q6VS7ISmflX+/30S8euOJp60e2Y=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Login","OTPVerification","Dashboard","jsxDEV","_jsxDEV","App","_s","step","setStep","clientId","setClientId","authData","setAuthData","storedClientId","localStorage","getItem","storedAuthData","JSON","parse","handleLogin","data","setItem","stringify","handleOTPRequired","handleBackToLogin","removeItem","handleLogout","className","children","onLogin","onOTPRequired","fileName","_jsxFileName","lineNumber","columnNumber","onSuccess","onBackToLogin","onLogout","_c","$RefreshReg$"],"sources":["/home/mrunal/Documents/novazen/mofsl-client-frontend/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState, useEffect } from 'react';\nimport Login from '../src/components/Login';\nimport OTPVerification from '../src/components/OTPVerification';\nimport Dashboard from './Dashboard'; // Assuming you have a Dashboard component\n\nconst App = () => {\n  const [step, setStep] = useState('login');\n  const [clientId, setClientId] = useState('');\n  const [authData, setAuthData] = useState(null);\n\n  // Check for stored clientId and authentication state on mount\n  useEffect(() => {\n    const storedClientId = localStorage.getItem('clientId');\n    const storedAuthData = localStorage.getItem('authData');\n    \n    if (storedAuthData) {\n      // User is already authenticated\n      setAuthData(JSON.parse(storedAuthData));\n      setStep('dashboard');\n    } else if (storedClientId) {\n      // User has started authentication but needs OTP verification\n      setClientId(storedClientId);\n      setStep('otp');\n    }\n  }, []);\n\n  const handleLogin = (data) => {\n    // Store authentication data\n    localStorage.setItem('authData', JSON.stringify(data));\n    setAuthData(data);\n    setStep('dashboard');\n  };\n\n  const handleOTPRequired = (clientId) => {\n    setClientId(clientId);\n    setStep('otp');\n  };\n\n  const handleBackToLogin = () => {\n    // Clear stored clientId when going back to login\n    localStorage.removeItem('clientId');\n    setClientId('');\n    setStep('login');\n  };\n\n  const handleLogout = () => {\n    // Clear all stored data on logout\n    localStorage.removeItem('clientId');\n    localStorage.removeItem('authData');\n    setAuthData(null);\n    setClientId('');\n    setStep('login');\n  };\n\n  return (\n    <div className=\"container\">\n      {step === 'login' && (\n        <Login \n          onLogin={handleLogin} \n          onOTPRequired={handleOTPRequired} \n        />\n      )}\n      \n      {step === 'otp' && (\n        <OTPVerification \n          clientId={clientId} \n          onSuccess={handleLogin}\n          onBackToLogin={handleBackToLogin}\n        />\n      )}\n      \n      {step === 'dashboard' && (\n        <Dashboard \n          authData={authData} \n          onLogout={handleLogout} \n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}